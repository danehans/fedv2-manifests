# Skip due to https://github.com/kubernetes-sigs/federation-v2/pull/340#issuecomment-434524669
apiVersion: primitives.federation.k8s.io/v1alpha1
kind: Federatedstdio
metadata:
  name: handler
  namespace: istio-system
spec:
  template:
    spec:
      outputAsJson: true
---
apiVersion: primitives.federation.k8s.io/v1alpha1
kind: FederatedstdioPlacement
metadata:
  name: handler
  namespace: istio-system
spec:
  clusterNames:
  - cluster1
  - cluster2
---
apiVersion: primitives.federation.k8s.io/v1alpha1
kind: Federatedlogentry
metadata:
  name: accesslog
  namespace: istio-system
spec:
  template:
    spec:
      severity: '"Info"'
      timestamp: request.time
      variables:
        sourceIp: source.ip | ip("0.0.0.0")
        sourceApp: source.labels["app"] | ""
        sourcePrincipal: source.principal | ""
        sourceName: source.name | ""
        sourceWorkload: source.workload.name | ""
        sourceNamespace: source.namespace | ""
        sourceOwner: source.owner | ""
        destinationApp: destination.labels["app"] | ""
        destinationIp: destination.ip | ip("0.0.0.0")
        destinationServiceHost: destination.service.host | ""
        destinationWorkload: destination.workload.name | ""
        destinationName: destination.name | ""
        destinationNamespace: destination.namespace | ""
        destinationOwner: destination.owner | ""
        destinationPrincipal: destination.principal | ""
        apiClaims: request.auth.raw_claims | ""
        apiKey: request.api_key | request.headers["x-api-key"] | ""
        protocol: request.scheme | context.protocol | "http"
        method: request.method | ""
        url: request.path | ""
        responseCode: response.code | 0
        responseSize: response.size | 0
        requestSize: request.size | 0
        requestId: request.headers["x-request-id"] | ""
        clientTraceId: request.headers["x-client-trace-id"] | ""
        latency: response.duration | "0ms"
        connection_security_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
        requestedServerName: connection.requested_server_name | ""
        userAgent: request.useragent | ""
        responseTimestamp: response.time
        receivedBytes: request.total_size | 0
        sentBytes: response.total_size | 0
        referer: request.referer | ""
        httpAuthority: request.headers[":authority"] | request.host | ""
        xForwardedFor: request.headers["x-forwarded-for"] | "0.0.0.0"
        reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      monitored_resource_type: '"global"'
---
apiVersion: primitives.federation.k8s.io/v1alpha1
kind: FederatedlogentryPlacement
metadata:
  name: accesslog
  namespace: istio-system
spec:
  clusterNames:
  - cluster1
  - cluster2
---
apiVersion: primitives.federation.k8s.io/v1alpha1
kind: Federatedlogentry
metadata:
  name: tcpaccesslog
  namespace: istio-system
spec:
  template:
    spec:
      severity: '"Info"'
      timestamp: context.time | timestamp("2017-01-01T00:00:00Z")
      variables:
        connectionEvent: connection.event | ""
        sourceIp: source.ip | ip("0.0.0.0")
        sourceApp: source.labels["app"] | ""
        sourcePrincipal: source.principal | ""
        sourceName: source.name | ""
        sourceWorkload: source.workload.name | ""
        sourceNamespace: source.namespace | ""
        sourceOwner: source.owner | ""
        destinationApp: destination.labels["app"] | ""
        destinationIp: destination.ip | ip("0.0.0.0")
        destinationServiceHost: destination.service.host | ""
        destinationWorkload: destination.workload.name | ""
        destinationName: destination.name | ""
        destinationNamespace: destination.namespace | ""
        destinationOwner: destination.owner | ""
        destinationPrincipal: destination.principal | ""
        protocol: context.protocol | "tcp"
        connectionDuration: connection.duration | "0ms"
        connection_security_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
        requestedServerName: connection.requested_server_name | ""
        receivedBytes: connection.received.bytes | 0
        sentBytes: connection.sent.bytes | 0
        totalReceivedBytes: connection.received.bytes_total | 0
        totalSentBytes: connection.sent.bytes_total | 0
        reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source", "destination")
      monitored_resource_type: '"global"'
---
apiVersion: primitives.federation.k8s.io/v1alpha1
kind: FederatedlogentryPlacement
metadata:
  name: tcpaccesslog
  namespace: istio-system
spec:
  clusterNames:
  - cluster1
  - cluster2
